//FIRSTONE 
#include<iostream>

#include<algorithm>

using namespace std;

void swap(int *x, int *y)

{

                int temp = *x;

                *x = *y;

                *y = temp;

}

void sortInWave(int arr[], int n)

{

                sort(arr, arr+n);

                for (int i=0; i<n-1; i += 2)

                                swap(&arr[i], &arr[i+1]);

}

int main()

{

                int arr[] = {2, 4, 7, 8, 9, 10};

                int n = sizeof(arr)/sizeof(arr[0]);

                sortInWave(arr, n);

                for (int i=0; i<n; i++)

                cout << arr[i] << " ";

                return 0;

}

--
//SECONDONE

#include <algorithm>

#include <iostream>

#include <vector>

void push_zeros_to_end(std::vector<int>& arr)

{

std::stable_partition(arr.begin(),

                                                arr.end(),

                                                [](int n) { return n != 0; });

}

int main()

{

std::vector<int> arr{12, 0, 13, 0, 15};       

push_zeros_to_end(arr);           

for(const auto& i : arr)

                std::cout << i << ' ';

std::cout << "\n";

return 0;

}

--
//3RDONE
#include <bits/stdc++.h>

using namespace std;

void findMissing(int arr[], int N)

{

                int i;

                int temp[N + 1];

                for(int i = 0; i <= N; i++){

                temp[i] = 0;

                }

                for(i = 0; i < N; i++){

                temp[arr[i] - 1] = 1;

                }

                int ans;

                for (i = 0; i <= N ; i++) {

                                if (temp[i] == 0)

                                                ans = i + 1;

                }

                cout << ans;

}

int main()

{

                int arr[] = { 1, 3, 7, 5, 6, 2 };

                int n = sizeof(arr) / sizeof(arr[0]);

                findMissing(arr, n);

}
